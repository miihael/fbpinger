IF(NOT GENGETOPT_EXECUTABLE)
	MESSAGE(STATUS "Looking for gengetopt")
	FIND_PROGRAM(GENGETOPT_EXECUTABLE gengetopt)
	IF(GENGETOPT_EXECUTABLE)
		EXECUTE_PROCESS(COMMAND "${GENGETOPT_EXECUTABLE}" --version OUTPUT_VARIABLE _version)
		STRING(REGEX MATCH "[0-9.]+" GENGETOPT_VERSION ${_version})
		SET(GENGETOPT_FOUND TRUE)
	ENDIF(GENGETOPT_EXECUTABLE)
ELSE(NOT GENGETOPT_EXECUTABLE)
	EXECUTE_PROCESS(COMMAND "${GENGETOPT_EXECUTABLE}" --version OUTPUT_VARIABLE _version)
	STRING(REGEX MATCH "[0-9.]+" GENGETOPT_VERSION ${_version})
	SET(GENGETOPT_FOUND TRUE)
ENDIF(NOT GENGETOPT_EXECUTABLE)

IF(GENGETOPT_FOUND)
	MESSAGE(STATUS "Found gengetopt: ${GENGETOPT_EXECUTABLE} (${GENGETOPT_VERSION})")
ELSE(GENGETOPT_FOUND)
	MESSAGE(FATAL_ERROR "Could not find gengetopt")
ENDIF(GENGETOPT_FOUND)

STRING(REPLACE "." ";" GENGETOPT_VERSION_LIST ${GENGETOPT_VERSION})
LIST(GET GENGETOPT_VERSION_LIST 0 GENGETOPT_VERSION_MAJOR)
LIST(GET GENGETOPT_VERSION_LIST 1 GENGETOPT_VERSION_MINOR)
LIST(GET GENGETOPT_VERSION_LIST 2 GENGETOPT_VERSION_PATCH)

MACRO(WRAP_GGO GGO_SRCS GGO_SUFFIX)
	FOREACH(GGO_FILE ${ARGN})
		GET_FILENAME_COMPONENT(GGO_BASEFILENAME ${GGO_FILE} NAME_WE)
		GET_FILENAME_COMPONENT(GGO_FILE_ABS ${GGO_FILE} ABSOLUTE)
		SET(GGO_H ${GGO_BASEFILENAME}_ggo.h)
		SET(GGO_C ${GGO_BASEFILENAME}_ggo.c)
		SET(GGO_OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${GGO_H} ${CMAKE_CURRENT_BINARY_DIR}/${GGO_C})
		IF(NOT "${GGO_SUFFIX}" STREQUAL "")
			SET(GGO_SUFFIX_EXT "_${GGO_SUFFIX}")
		ELSE(NOT "${GGO_SUFFIX}" STREQUAL "")
			SET(GGO_SUFFIX_EXT "")
		ENDIF(NOT "${GGO_SUFFIX}" STREQUAL "")
		ADD_CUSTOM_COMMAND(OUTPUT ${GGO_OUTPUT}
			COMMAND ${GENGETOPT_EXECUTABLE}
			ARGS < ${GGO_FILE_ABS}
			--output-dir=${CMAKE_CURRENT_BINARY_DIR}
			--arg-struct-name=ggo_args_info${GGO_SUFFIX_EXT}
			--func-name=ggo_cmdline_parser${GGO_SUFFIX_EXT}
			--file-name=${GGO_BASEFILENAME}_ggo
			--unamed-opts
			--conf-parser
			--include-getopt
			DEPENDS ${GGO_FILE_ABS}
			)
		SET(${GGO_SRCS} ${${GGO_SRCS}} ${GGO_OUTPUT})
		INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
	ENDFOREACH(GGO_FILE)
	SET_SOURCE_FILES_PROPERTIES(${${GGO_SRCS}}
		PROPERTIES
		GENERATED TRUE
		COMPILE_FLAGS "-Wno-unused"
		COMPILE_FLAGS "-Wno-unused-but-set-variable"
	)
ENDMACRO(WRAP_GGO)
